#!/bin/ksh

# Author: Ruairi O Brien
# 15-February-2013
# Script to launch and hide implementation of other scripts used to automate testign of fsUtils

# If the script exits unexpectedly offer the user the option to delete any files generated by the script before termination.
trap 'echo "Something terrible happened. Attempting to clean up the mess...."; CleanUp;' INT TERM 


FSMA_JIRA_NUM=197

# The current directory of this script
#DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# The root directory for all scripts
DIR="$( pwd )" 

# Where any DTL File, Configurations and Src Code should go
INPUTS_DIR=$DIR/INPUTS
# This is the directory where the fsUtils source code should go 
# i.e. the directory src should be directly beneath this one
CODE_DIR=$INPUTS_DIR/code
# This is where configuration files i.e. *.cfg should go.
# Only used for reporting.
CONFIGS_DIR=$INPUTS_DIR/configs

SCAN_CONFIGS_DIR=$CONFIGS_DIR/scan
REPORT_CONFIGS_DIR=$CONFIGS_DIR/report

# This is where DTL files that will have reports generated against 
# them should go.
DTL_FILE_INPUT_DIR=$INPUTS_DIR/dtl_files
#Where all the work happens, i.e. executables and scripts are stored.
WORKING_DIR=$DIR/WORKING

# Where any usable outputs from the test scripts will go
OUTPUT_DIR=$DIR/OUTPUTS
# Where generated reports will go
REPORTS_DIR=$OUTPUT_DIR/reports
# Where text fiel outputs for scan tests will go
TEST_OUTPUT_DIR=$OUTPUT_DIR/test_outputs

# Location of test files to be scanned
ROOT_TEST_SCAN_LOCATION=FSMA_TARGET_SCAN_FOLDER
# Files generated to extend on test scan
GENERATED_TEST_FILES=$ROOT_TEST_SCAN_LOCATION/gen
#Test files used when generating sym links and hard links
TEST_FILES_DIR=$WORKING_DIR/test_files
# Name of folder containing DTL files
DTL_FILE_DIR=dtl_files
# Prefix for name of DTL files passed as parameter to fsscan
DTL_FILE=$OUTPUT_DIR/$DTL_FILE_DIR/fsScan
# Scan tag passed as paramete to fsscan
SCAN_TAG=FSMA_RPT
# location and name of fsscan app
FSSCAN_APP=$WORKING_DIR/fsscan
# location and name of fsReport app
FSREPORT_APP=$WORKING_DIR/fsReport

# Shared folder stuff
NET_LOC_OF_SHARE=//gsshare.isus.emc.com/gssd
MOUNTED_SHARE=/mnt/gsshare
TEST_FILES_LOCATION=tools/FSMA/$ROOT_TEST_SCAN_LOCATION 

function pause {
	read -p "$*"
}

function SetUpDirectories {	
	mkdir -p $CONFIGS_DIR;
	mkdir -p $DTL_FILE_INPUT_DIR;
	mkdir -p $REPORTS_DIR;
	mkdir -p $TEST_OUTPUT_DIR;
}

# Copy any DTL files that may have been generated by the fsscan within this application 
function CopyGeneratedDTLFiles {
	read -p "Would you like to copy all DTL files from previous scans (if they exist) in the the DTL input folder for report generation?(y/n)";
	if [ $REPLY == "y" ] || [ $REPLY == "Y" ]; then
		cp $OUTPUT_DIR/$DTL_FILE_DIR/* $DTL_FILE_INPUT_DIR;
	fi
}

# Compile fsScan code and move the executable to the root test folder.
function CompileAndCopyFsScan {
	if [ -f "$FSSCAN_APP" ]; then
		rm $FSSCAN_APP
	fi
	# Compile fsScanLinux
	echo "Compiling fsScan...";
	cd $CODE_DIR/src/fsScanLinuxUnix/fsscan/;
	make clean;
	make;
	cd $DIR;
	cp $CODE_DIR/src/fsScanLinuxUnix/fsscan/fsscan $FSSCAN_APP;

	if [ -f "$FSSCAN_APP" ]; 
		then
	        echo "Compilation complete";
		echo "fsscan file copied to working dir";
	
		else
		
		echo "Error! fsscan file was not copied to working directory";
		exit 1;
	fi
}


# Get test files to run a scan against
function GetTestFiles {
if [ -d "$ROOT_TEST_SCAN_LOCATION" ]; then 
	echo "$ROOT_TEST_SCAN_LOCATION already exists.";
else
	if [ ! -d "$ROOT_TEST_SCAN_LOCATION" ]; then
		mkdir -p $ROOT_TEST_SCAN_LOCATION;
		chmod 777 $ROOT_TEST_SCAN_LOCATION;
	fi
	if grep -q "[[:space:]]$MOUNTED_SHARE[[:space:]]" /proc/mounts; then
		echo "GSSD Shard already mounted.";
	else
		MountShared
		chmod 777 $MOUNTED_SHARE;
	fi
	echo 'Copying test files to $ROOT_TEST_SCAN_LOCATION';
	cp -r $MOUNTED_SHARE/$TEST_FILES_LOCATION $ROOT_TEST_SCAN_LOCATION;
	echo 'Copying files complete';	
fi

echo "Finished getting test files.";
}

# Mouunt the GSSD Shared folder to allow access and retrieve test data.
function MountShared {
	mkdir -p $MOUNTED_SHARE;
	sudo mount -t cifs $NET_LOC_OF_SHARE  $MOUNTED_SHARE -o username=gsshare,password=pwDgs\$hAr3,domain=gssd;	
}

# Create some test file types i.e. symbolic links, hard links, empty directories and files.
function CreateTestFiles {
	mkdir -p $GENERATED_TEST_FILES
	cp -r $TEST_FILES_DIR/* $GENERATED_TEST_FILES;

	ln $GENERATED_TEST_FILES/Pictures/Desert.jpg $GENERATED_TEST_FILES/Pic2/A.jpg;
	ln -s $GENERATED_TEST_FILES/Pictures/Jellyfish.jpg $GENERATED_TEST_FILES/Pic2/B.jpg ;
	ln $GENERATED_TEST_FILES/Pictures/Lighthouse.jpg $GENERATED_TEST_FILES/Pic2/C.jpg ;
	ln $GENERATED_TEST_FILES/Pictures/Desert.jpg $GENERATED_TEST_FILES/Pic2/D.jpg;
	ln -s $GENERATED_TEST_FILES/Pictures/Lighthouse.jpg $GENERATED_TEST_FILES/Pic2/E.jpg;

	ln -s $GENERATED_TEST_FILES/Pictures $GENERATED_TEST_FILES/Junctions/Pic_Sym;
	ln -s $GENERATED_TEST_FILES/Texts $GENERATED_TEST_FILES/Junctions/Texts_Junc;
	ln -s $GENERATED_TEST_FILES/Pic2 $GENERATED_TEST_FILES/Junctions/Pic2_Junc;
	mkdir $GENERATED_TEST_FILES/fsReportTest2;

	cp -r $TEST_FILES_DIR/* $GENERATED_TEST_FILES/fsReportTest2;

	ln $GENERATED_TEST_FILES/fsReportTest2/Pictures/Desert.jpg $GENERATED_TEST_FILES/fsReportTest2/Pic2/A.jpg;
	ln -s $GENERATED_TEST_FILES/fsReportTest2/Pictures/Jellyfish.jpg $GENERATED_TEST_FILES/fsReportTest2/Pic2/B.jpg;
	ln $GENERATED_TEST_FILES/fsReportTest2/Pictures/Lighthouse.jpg $GENERATED_TEST_FILES/fsReportTest2/Pic2/C.jpg;
	ln $GENERATED_TEST_FILES/fsReportTest2/Pictures/Desert.jpg $GENERATED_TEST_FILES/fsReportTest2/Pic2/D.jpg;
	ln -s $GENERATED_TEST_FILES/fsReportTest2/Pictures/Lighthouse.jpg $GENERATED_TEST_FILES/fsReportTest2/Pic2/E.jpg;

	ln -s $GENERATED_TEST_FILES/fsReportTest2/Pictures $GENERATED_TEST_FILES/fsReportTest2/Junctions/Pic_Sym;
	ln -s $GENERATED_TEST_FILES/fsReportTest2/Texts $GENERATED_TEST_FILES/fsReportTest2/Junctions/Texts_Junc;

	mkdir $GENERATED_TEST_FILES/fsReportTest2/Pic3;
	cp $GENERATED_TEST_FILES/fsReportTest2/Pictures/Desert.jpg $GENERATED_TEST_FILES/fsReportTest2/Pic3/B.jpg;
	ln -s $GENERATED_TEST_FILES/fsReportTest2/Pictures $GENERATED_TEST_FILES/fsReportTest2/Pic3/Pic_Sym;
	ln $GENERATED_TEST_FILES/fsReportTest2/Pictures/Lighthouse.jpg $GENERATED_TEST_FILES/fsReportTest2/Pic3/C.jpg;
	ln $GENERATED_TEST_FILES/fsReportTest2/Pictures/Lighthouse.jpg $GENERATED_TEST_FILES/fsReportTest2/Pic3/D.jpg;
	mkdir "$GENERATED_TEST_FILES/empty1";
	mkdir "$GENERATED_TEST_FILES/empty2";

echo "Finished creating test files.";
}

# Delete all test data. Unmount shared drive. 
function CleanUp {
	rm -rf $GENERATED_TEST_FILES;
	read -p "Delete all outputs and compiled fsscan?(y/n)"
	if [ $REPLY == "y" ] || [ $REPLY == "Y" ]; then
		rm -rf OUTPUTS;
		rm $FSSCAN_APP;		
	fi
}

# Checks the fsScan application can be run. Creates an output folder for DTTL files. Runs multiple scans based
# on how the RunMultipleScansWithFlags function is implemented.
function RunScans {
	
	if [ -f $FSSCAN_APP ];
	then
    		chmod +x $FSSCAN_APP;
		if [ ! -d "$OUTPUT_DIR" ]; then
			mkdir $OUTPUT_DIR;
		fi
		if [ -d "$OUTPUT_DIR/$DTL_FILE_DIR" ]; then
			rm -rf "$OUTPUT_DIR/$DTL_FILE_DIR"; 	
		fi
		mkdir "$OUTPUT_DIR/$DTL_FILE_DIR";
		chmod 777 -R $OUTPUT_DIR;
		read -p 'Please enter JIRA number to add to output file names:';
		RunMultipleScansWithFlags $REPLY	
	else
		echo "An eror has occured. Please ensure that $FSSCAN_APP exists.";
	fi

}

# Run a series of scans, output to a folder and zip that folder up.
function RunMultipleScansWithFlags {
	echo "Starting first test scan";
	echo "Test";
	echo "$ROOT_TEST_SCAN_LOCATION" -dtl "${DTL_FILE}_test1.dtl" -tag "$SCAN_TAG" > "$OUTPUT_DIR/test_outputs/JIRA_FSMA-${1}_TEST_1_FSSCAN_OUTPUT.txt";
		
	$FSSCAN_APP "$ROOT_TEST_SCAN_LOCATION" -dtl "${DTL_FILE}_test1.dtl" -tag "$SCAN_TAG" > "$OUTPUT_DIR/test_outputs/JIRA_FSMA-${1}_TEST_1_FSSCAN_OUTPUT.txt";

	echo "Starting second test scan";
	$FSSCAN_APP -cfg "$SCAN_CONFIGS_DIR/test3.cfg" -dtl "${DTL_FILE}_test3.dtl" -tag "$SCAN_TAG" > "$OUTPUT_DIR/test_outputs/JIRA_FSMA-${1}_TEST_3_FSSCAN_OUTPUT.txt";

	echo "Starting third test scan";
	$FSSCAN_APP -cfg "$SCAN_CONFIGS_DIR/test4.cfg" -dtl "${DTL_FILE}_test4.dtl" -tag "$SCAN_TAG" > "$OUTPUT_DIR/test_outputs/JIRA_FSMA-${1}_TEST_4_FSSCAN_OUTPUT.txt";

	echo "Starting fourth test scan";
	$FSSCAN_APP -cfg "$SCAN_CONFIGS_DIR/test5.cfg" -dtl "${DTL_FILE}_test5.dtl" -tag "$SCAN_TAG" > "$OUTPUT_DIR/test_outputs/JIRA_FSMA-${1}_TEST_5_FSSCAN_OUTPUT.txt";

	CreateTestFiles

	echo "Starting sixth test scan";
	$FSSCAN_APP "$ROOT_TEST_SCAN_LOCATION" -dtl "${DTL_FILE}_test2.dtl" -tag "$SCAN_TAG" > "$OUTPUT_DIR/test_outputs/JIRA_FSMA-${1}_TEST_2_FSSCAN_OUTPUT.txt";

	zip -r $OUTPUT_DIR/test_outputs/JIRA_FSMA-${1}_DTLS.zip $OUTPUT_DIR/$DTL_FILE_DIR/*;

	chmod 777 -R $OUTPUT_DIR;
}
 

echo "WARNING... If your not running this script with elevated permissons i.e. sudo, su, root whatever.. it will blow up in your face."


SetUpDirectories
if [ ! -d $CODE_DIR ];
then
	'Warning! No code to build fsUtils has been found.'
fi
chmod -R 777 WORKING


CompileAndCopyFsScan
GetTestFiles
RunScans
rm -rf $GENERATED_TEST_FILES;
echo "Script completed...."


exit $?
